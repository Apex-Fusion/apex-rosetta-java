def envFile

def COLOR_MAP = [
    'SUCCESS': 'good',
    'FAILURE': 'danger',
]

pipeline {
    agent any

    stages {
        stage('Read Env') {
            steps {
                script {
                    envFile = readProperties file: '/tmp/consumer.env'
                }
                echo 'Read Env successfully!!!'
            }
        }


        stage('Build') {
            steps {
                echo 'Building..'
                sh 'mvn -B -DskipTests clean package'
                echo 'Build successfully!!!'
            }
        }


        stage('Sonarqube Scan') {
            steps {
                script {
                    def SONAR_KEY = envFile.SONAR_KEY
                    def SONAR_HOST = envFile.SONAR_HOST
                    def SONAR_LOGIN = envFile.SONAR_LOGIN

                    echo 'Sonarqube scanning...'
                    sh "mvn sonar:sonar -Dsonar.projectKey=${SONAR_KEY} -Dsonar.analysisCache.enabled=false -Dsonar.host.url=${SONAR_HOST} -Dsonar.login=${SONAR_LOGIN} -Dsonar.sources=src/main/java/ -Dsonar.java.binaries=target/classes"
                    echo 'Sonarqube scan successfully!!!'
                }
            }
        }

        stage('Test') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def SPRING_PROFILES_ACTIVE = envFile.SPRING_PROFILES_ACTIVE
                    def POSTGRES_HOST = envFile.POSTGRES_HOST
                    def POSTGRES_PORT = envFile.POSTGRES_PORT
                    def POSTGRES_USER = envFile.POSTGRES_USER
                    def POSTGRES_PASSWORD = envFile.POSTGRES_PASSWORD
                    def POSTGRES_DB = envFile.POSTGRES_DB
                    def BOOSTRAP_SERVER_HOST = envFile.BOOSTRAP_SERVER_HOST
                    def BOOSTRAP_SERVER_PORT = envFile.BOOSTRAP_SERVER_PORT
                    def BLOCKS_TOPIC = envFile.BLOCKS_TOPIC
                    def SCHEMA = envFile.SCHEMA

                    echo 'Testing..'
                    sh "mvn test -DSPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE} -DPOSTGRES_HOST=${POSTGRES_HOST} -DPOSTGRES_PORT=${POSTGRES_PORT} -DPOSTGRES_USER=${POSTGRES_USER} -DPOSTGRES_PASSWORD=${POSTGRES_PASSWORD} -DPOSTGRES_DB=${POSTGRES_DB} -DBOOSTRAP_SERVER_HOST=${BOOSTRAP_SERVER_HOST} -DBOOSTRAP_SERVER_PORT=${BOOSTRAP_SERVER_PORT} -DBLOCKS_TOPIC=${BLOCKS_TOPIC} -DSCHEMA=${SCHEMA}"
                    echo 'Test successfully!!!'
                }
            }
        }

        stage('Deploy') {
            when {
                branch 'develop'
            }
            steps {
                sshagent(credentials: ['cardano-ssh-agent']) {
                    sh '''
                        [ -d ~/.ssh ] || mkdir ~/.ssh && chmod 0700 ~/.ssh
                        ssh-keyscan -t rsa,dsa 10.4.10.112 >> ~/.ssh/known_hosts
                        ssh sotatek@10.4.10.112  "
                            cd /cardano/cardano-consumer
                            git reset --hard origin/develop
                            git pull origin develop
                            docker compose --env-file /cardano/configs/cardano-consumer/consumer-mainnet.env -f docker-compose.yml -p consumer-mainnet up -d --build
                            docker compose --env-file /cardano/configs/cardano-consumer/consumer-preprod.env -f docker-compose.yml -p consumer-preprod up -d --build
                            docker images -f 'dangling=true' -q --no-trunc | xargs -r  docker rmi
                        "
                    '''
                }

            }
        }
    }
    post {
        always {
            script {
                Author_ID = sh(script: 'git show -s --pretty=%an', returnStdout: true).trim()
                Author_Name = sh(script: 'git show -s --pretty=%ae', returnStdout: true).trim()
            }
            slackSend channel: '#build-group-test',
                    color: COLOR_MAP[currentBuild.currentResult],
                    message: "*${currentBuild.currentResult}:* ${env.JOB_NAME} build ${env.BUILD_NUMBER} by commit author: ${Author_ID} \n More information at: ${env.BUILD_URL}"
        }
    }
}
